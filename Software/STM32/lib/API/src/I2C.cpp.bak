#include "I2C.h"

I2C :: I2C(I2C_TypeDef* I2Cx, GPIO_common GPIO_c_sda, GPIO_common GPIO_c_scl)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef  I2C_InitStructure;
	
	m_I2C = I2Cx;
	
	m_sdaPort = GPIO_c_sda.port;
	m_sdaPin = GPIO_c_sda.pin;
	m_sdaSource = GPIO_c_sda.pinSource;
	
	m_sclPort = GPIO_c_scl.port;
	m_sclPin = GPIO_c_scl.pin;
	m_sclSource = GPIO_c_scl.pinSource;

	/* SDA/SCL GPIO clock enable */
  if(m_sdaPort == GPIOA) RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	else if(m_sdaPort == GPIOB) RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
	else if(m_sdaPort == GPIOC) RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
	else if(m_sdaPort == GPIOD) RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
	else if(m_sdaPort == GPIOF) RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
	
	if(m_sclPort == GPIOA) RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	else if(m_sclPort == GPIOB) RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
	else if(m_sclPort == GPIOC) RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
	else if(m_sclPort == GPIOD) RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
	else if(m_sclPort == GPIOF) RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
	
	/* Connect pins to I2Cx Alternate Function mapping */
	GPIO_PinAFConfig(m_sdaPort, m_sdaSource, GPIO_AF_1);
	GPIO_PinAFConfig(m_sclPort, m_sclSource, GPIO_AF_1);

	/* GPIO Configuration SDA and SCL */
  GPIO_InitStructure.GPIO_Pin = m_sdaPin;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
	GPIO_Init(m_sdaPort, &GPIO_InitStructure);
  
  GPIO_InitStructure.GPIO_Pin = m_sclPin;
  GPIO_Init(m_sclPort, &GPIO_InitStructure);
	
  /* I2C Peripheral clock enable */
  if(m_I2C == I2C1) RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
	else if(m_I2C == I2C2) RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
	
	/* Configure the I2C clock source */
  if(m_I2C == I2C1) RCC_I2CCLKConfig(RCC_I2C1CLK_HSI);
	
	/* I2C De-initialize (!important) */
  I2C_DeInit(m_I2C);
	
  /* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;					/* I2C mode (I2C, SMBus, ...) */
	I2C_InitStructure.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
  I2C_InitStructure.I2C_DigitalFilter = 0x00;
	I2C_InitStructure.I2C_OwnAddress1 = OWN_ADDRESS;		/* Own address */
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;					/* Acknowledge enable */
	
	if(m_I2C == I2C1) I2C_InitStructure.I2C_Timing = 0x0030020B; 					// Speed !!! 400KHz | 8MHz (HSI) => 0x0030020A
  else if(m_I2C == I2C2) I2C_InitStructure.I2C_Timing =  0x10950C27;		// Speed !!! 400KHz | 48MHz (PCCLK => HSE) => 0x10950C27
	
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;	/* 7-bit address is acknowledged */

  /* I2C Initialization */
  I2C_Init(m_I2C, &I2C_InitStructure);
  
  /* I2C ENABLE */
  I2C_Cmd(m_I2C, ENABLE);
}

//*****************************************************************************
//! I2C_Read
//-----------------------------------------------------------------------------
//!	
//! Read request on I2C bus (take 1ms at 400kHz)
//-----------------------------------------------------------------------------
//! @param  [in] address : device address
//! @param  [in] command : command byte(s)
//! @param  [in] size : number of command byte 
//-----------------------------------------------------------------------------
//! @return SUCCESS or ERROR
//*****************************************************************************

char I2C :: read(char address, char* command, char size)
{
	int i = 0;
	int timeout = I2C_TIMEOUT;
	char result = SUCCESS;
	
	/* While the bus is busy */	
	while((I2C_GetFlagStatus(m_I2C, I2C_FLAG_BUSY)))
	{
		if((timeout--) == 0) return ERROR;
 	}

	/* Send first Start and control byte (slave address + R/W) */
	I2C_TransferHandling(m_I2C, address, size, I2C_AutoEnd_Mode, I2C_Generate_Start_Read);
	
	/* Clear NACKF */
  I2C_ClearFlag(m_I2C, I2C_ICR_NACKCF | I2C_ICR_STOPCF);
	
	/* Start read (ACK) */
	for(i = 0; i < size; i++, command++)
	{
		timeout = I2C_TIMEOUT;
		
		/* Wait until RXNE flag is set */
		while(I2C_GetFlagStatus(m_I2C, I2C_ISR_RXNE) == RESET) 
		{
			if((timeout--) == 0) return ERROR;
		}
			
		/* Get byte */
		*command = I2C_ReceiveData(m_I2C);
	}

	timeout = I2C_TIMEOUT;
		
	while(I2C_GetFlagStatus(m_I2C, I2C_ISR_TC) == RESET)
	{
		if((timeout--) == 0) return ERROR;
	}

// 	/* Send STOP Condition */ 
// 	I2C_GenerateSTOP(m_I2C, ENABLE);
		
	return result;
}

//*****************************************************************************
//! I2C_Write
//-----------------------------------------------------------------------------
//!	
//! Write request on I2C bus (take 1ms at 400kHz)
//-----------------------------------------------------------------------------
//! @param  [in] address : device address
//! @param  [in] command : command byte(s)
//! @param  [in] size : number of command byte 
//-----------------------------------------------------------------------------
//! @return SUCCESS or ERROR
//*****************************************************************************

char I2C :: write(char address, char* command, char size)
{
	int i = 0;
	int timeout = I2C_TIMEOUT;
	char result = SUCCESS;
	
	/* While the bus is busy */	
	while((I2C_GetFlagStatus(m_I2C, I2C_FLAG_BUSY)))
	{
		if((timeout--) == 0) return ERROR;
 	}
	
	/* Clear NACKF */
  I2C_ClearFlag(m_I2C, I2C_ICR_NACKCF | I2C_ICR_STOPCF);
	
	/* Send first Start and control byte (slave address + R/W) */
	I2C_TransferHandling(m_I2C, address, size, I2C_AutoEnd_Mode, I2C_Generate_Start_Write);
	
	/* Start write (ACK) */
	for(i = 0; i < size; i++, command++)
	{
		timeout = I2C_TIMEOUT;
	
		/* Wait until TXIS flag is set */
		while(I2C_GetFlagStatus(m_I2C, I2C_ISR_TXIS) == RESET)
		{
			if((timeout--) == 0) return ERROR;
		}
			
		/* Send data */
		I2C_SendData(m_I2C, (uint8_t) *command);
	}

	timeout = I2C_TIMEOUT;
		
	while(I2C_GetFlagStatus(m_I2C, I2C_ISR_TC) == RESET)
	{
		if((timeout--) == 0) return ERROR;
	}

	/* Send STOP Condition */ 
	//I2C_GenerateSTOP(m_I2C, ENABLE);
		
	return result;
}
